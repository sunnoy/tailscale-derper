name: Daily Derper Build

on:
  schedule:
    - cron: '0 17 * * *'   # 每天UTC 1点，北京时间早上9点
  workflow_dispatch:     # 允许手动触发

env:
  IMAGE_NAME: tailscale-derper
  REGISTRY: ghcr.io  # 或 docker.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get today's date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Build and Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.IMAGE_NAME }}:${{ steps.date.outputs.date }}

  cleanup:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Delete old images (keep last 3)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const perPage = 100;

            // 获取所有 tags（按时间倒序）
            const tags = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
              package_type: 'container',
              package_name: process.env.IMAGE_NAME,
              username: owner,
              per_page: perPage,
            });

            const versions = tags.data;

            if (versions.length <= 3) {
              console.log("Less than or equal to 3 tags, nothing to delete.");
              return;
            }

            const toDelete = versions.slice(3); // 保留最新的3个

            for (const version of toDelete) {
              console.log(`Deleting ${version.name} (${version.id})`);
              await github.rest.packages.deletePackageVersionForUser({
                package_type: 'container',
                package_name: process.env.IMAGE_NAME,
                username: owner,
                package_version_id: version.id,
              });
            }
